{"version":3,"sources":["logo.svg","model/data/initialState.js","model/constants/ActionTypes.js","model/reducer.js","Template/Template.js","Table/Rows/Phrase/Word/Word.js","Table/Rows/Phrase/Phrase.js","Table/Rows/Rows.js","Table/Table.js","Keywords/Keywords.js","App.js","model/actions/phraseActions.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","data","import_area","template","phrases","export_area","last_template","FILL_IMPORT","EDIT_TEMPLATE","GENERATE_TABLE","KEYWORD_CHANGE","REMARK_WORD","COLOR_PHRASE","result","state","arguments","length","undefined","action","hash","value","word","based_template","input_area","type","types","_phraseExecute","phrase","Object","objectSpread","words","map","w","marker","setPhraseDepencies","keyword","_setTitle","key","createPhrases","colored","phrasesArray","push","filter","reduce","acc","minuses","trim","callback","hashed","_len","args","Array","_key","apply","concat","split","k","newPhrase","fullKeyword","_divideKeyword2","replace","_divideKeyword","light","hashCode","createPhrase","str","i","charCodeAt","_setLength","_setLight","new_words","pastePhraseInTemplate","text","_setMarker","curr","idx","keys","isEqualWords","len","b_template","bolderLength","realLength","word1","word2","cutEnd","ends","end","withoutEnd","substring","Template","_ref","onChange","generateTable","react_default","a","createElement","className","e","target","onClick","preventDefault","Word","remarkWord","onContextMenu","Phrase","index","Phrase_Word_Word","assign","createWords","Rows","onKeywordChange","onCheck","row_array","createRow","checked","Rows_Phrase_Phrase","createRows","defaultProps","Table","props","Table_Rows_Rows","Keywords","onInputChange","name","id","cols","rows","App","_this$props","this","fillImport","colorPhrase","onTemplateChange","src","logo","alt","src_Keywords_Keywords","src_Template_Template","src_Table_Table","Component","connect","stateProps","dispatchProps","dispatch","AC","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reducer","combineReducers","reducers","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6d5b351c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const data = {\r\n  import_area: \"фотостудия в питере, красивые фото, нет\",\r\n  template: \"красиво питер фотостудией #шаблон#\",\r\n  phrases: {},\r\n  export_area: \"fdd\",\r\n  last_template: \"\"\r\n}","export const FILL_IMPORT = \"FILL_IMPORT\"\r\nexport const EDIT_TEMPLATE = \"EDIT_TEMPLATE\"\r\nexport const GENERATE_TABLE = \"GENERATE_TABLE\"\r\nexport const KEYWORD_CHANGE = \"KEYWORD_CHANGE\"\r\nexport const REMARK_WORD = \"REMARK_WORD\"\r\nexport const COLOR_PHRASE = \"COLOR_PHRASE\"\r\nexport const FILL_EXPORT = \"FILL_EXPORT\"\r\n\r\nexport const MAX_LENGTH = 35;","import {data} from \"./data/initialState.js\"\r\nimport * as types from \"./constants/ActionTypes.js\" \r\n\r\nexport const phrases = (state = data.phrases, action) => {\r\n\tlet {hash, value, word, based_template, input_area} = action\r\n\tlet result\r\n\r\n\tswitch (action.type) {\r\n\t\tcase types.REMARK_WORD: \r\n\t\t\tresult = _phraseExecute(state, hash, (phrase) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...phrase,\r\n\t\t\t\t\twords: phrase.words.map(w => {\r\n      \t\t\t\t\treturn w.word === word\r\n\t\t\t        \t\t? {...w, marker: !w.marker}\r\n\t\t\t\t\t        : {...w}\r\n\t\t\t    \t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\treturn setPhraseDepencies(result, hash, based_template)\r\n\t\t\r\n\t\tcase types.KEYWORD_CHANGE:\r\n\t\t\tresult = _phraseExecute(state, hash, (phrase) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...phrase,\r\n\t\t\t\t\tkeyword: value\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tresult = _setTitle(result, hash, based_template)\r\n\t\t\treturn setPhraseDepencies(result, hash, based_template)\r\n\t\t\r\n\t\tcase types.GENERATE_TABLE:\r\n\t\t\tresult = createPhrases(input_area, based_template)\r\n\t\t\t\r\n\t\t\tfor (let key in result) {\r\n\t\t\t\tresult = _setTitle(result, key, result[key].based_template)\r\n\t\t\t\tresult = setPhraseDepencies(result, key, result[key].based_template)\r\n\t\t\t}\r\n\r\n\t\t\treturn result\r\n\t\t\r\n\t\tcase types.COLOR_PHRASE:\r\n\t\t\treturn _phraseExecute(state, hash, (phrase) => {\r\n\t\t\t\tlet colored = !phrase.colored\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...phrase,\r\n\t\t\t\t\tcolored\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const import_area = (state = data.import_area, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase types.FILL_IMPORT:\r\n\t\t\treturn action.value\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const template = (state = data.template, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase types.EDIT_TEMPLATE:\r\n\t\t\treturn action.value\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const export_area = (state = data.export_area, action) => {\r\n\tlet {hash, phrases} = action\r\n\r\n\tswitch (action.type) {\r\n\t\tcase types.COLOR_PHRASE:\r\n\t\t\tlet phrasesArray = []\r\n\t\t\t\r\n\t\t\tphrases[hash] = {\r\n\t\t\t\t...phrases[hash],\r\n\t\t\t\tcolored: !phrases[hash].colored\r\n\t\t\t}\r\n\r\n\t\t\tfor(let key in phrases) {\r\n\t\t\t\tphrasesArray.push(phrases[key])\r\n\t\t\t}\r\n\r\n\t\t\treturn phrasesArray\r\n\t\t\t\t.filter(p => p.colored)\r\n\t\t\t\t.reduce((acc, phrase) => {\r\n\t\t\t\t\treturn acc \r\n\t\t\t\t\t\t+ phrase.keyword\r\n\t\t\t\t\t\t+ \" \"\r\n\t\t\t\t\t\t+ phrase.minuses\r\n\t\t\t\t\t\t+ \"\\n\"\r\n\t\t\t\t}, \"\")\r\n\t\t\t\t.trim()\r\n\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const last_template = (state = data.last_template, action) => {\r\n\tswitch (action.type) {\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst _phraseExecute = (phrases, hash, callback, ...args) => {\r\n  let hashed = {...phrases}\r\n  hashed[hash] = callback(hashed[hash], ...args)\r\n\r\n  return hashed\r\n}\r\n\r\nconst _divideKeyword = (fullKeyword) => {\r\n\tlet keyword = fullKeyword\r\n\t\t.replace(/\\s-.*$/, \"\")\r\n\t\t.trim()\r\n\tlet minuses = fullKeyword\r\n\t\t.replace(keyword, \"\")\r\n\t\t.trim()\r\n\r\n\treturn {\r\n\t\tkeyword,\r\n\t\tminuses\r\n\t}\r\n}\r\n\r\nconst createPhrase = (fullKeyword, template) => {\r\n\tlet result = {}\r\n\tlet {keyword, minuses} = _divideKeyword(fullKeyword)\r\n\t\r\n\tlet phrase = {\r\n\t\tbased_template: template,\r\n\t\tkeyword,\r\n\t\tcolored: false,\r\n\t\tminuses,\r\n\t\tlength: 0,\r\n\t\tlight: 0,\r\n\t\twords: []\r\n\t}\r\n\r\n\tresult[\"p\" + hashCode(keyword)] = phrase\r\n\treturn result\r\n}\r\n\r\nconst createPhrases = (input_area, template) => {\r\n\tlet keywords = input_area\r\n\t\t.split(/(\\n|,)/g)\r\n\t\t.filter(k => k !== undefined)\r\n\t\t.filter(k => k !== null)\r\n\t\t.filter(k => k !== \",\")\r\n\t\t.map(k => k.trim())\r\n\t\t.filter(k => k !== \"\")\r\n\r\n\treturn keywords.reduce((phrases, keyword) => {\r\n\t\tlet newPhrase = createPhrase(keyword, template)\r\n\t\treturn {\r\n\t\t\t...phrases,\r\n\t\t\t...newPhrase\r\n\t\t}\r\n\t}, {})\r\n}\r\n\r\nconst hashCode = str => {\r\n    let hash = 0;\r\n    if (str.length === 0) {\r\n        return hash;\r\n    }\r\n    for (var i = 0; i < str.length; i++) {\r\n        let char = str.charCodeAt(i);\r\n        hash = ((hash << 5) - hash) + char;\r\n        hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n    return hash;\r\n}\r\n\r\nconst setPhraseDepencies = (phrases, hash, based_template) => {\r\n\tlet result = {...phrases}\r\n\tresult = _setLength(result, hash, based_template)\r\n\tresult = _setLight(result, hash)\r\n\r\n\treturn result\r\n}\r\n\r\nconst _setTitle = (phrases, hash, based_template) => {\r\n\t\r\n\treturn _phraseExecute(phrases, hash, (phrase) => {\r\n\t\tlet {keyword} = phrase\r\n\t\tlet {text} = pastePhraseInTemplate(keyword, based_template)\r\n\t\t\r\n\t\tlet new_words = text\r\n\t\t\t.split(\" \")\r\n\t\t\t.filter(w => w !== \"\")\r\n\t\t\t.map(word => ({\r\n\t\t\t\tword,\r\n\t\t\t\tmarker: _setMarker(keyword, word)\r\n\t\t\t}))\r\n\r\n\t\treturn {\r\n\t\t\t...phrase,\r\n\t\t\twords: new_words\r\n\t\t}\r\n\t})\r\n}\r\n\r\nconst _setMarker = (keyword, word) => {\r\n\treturn keyword\r\n\t\t.split(\" \")\r\n\t\t.reduce((acc, curr, idx, keys) => \r\n\t\t\tacc || isEqualWords(word, curr), \r\n\t\tfalse)\r\n}\r\n\r\nconst pastePhraseInTemplate = (phrase, based_template) => {\r\n\tlet text = based_template.replace(/#(.)*#/, phrase)\r\n\tlet len = text\r\n\t\t.replace(/(!|\\?|\\.)$/, \"\")\r\n\t\t.length\r\n\r\n\tif(len > types.MAX_LENGTH){\r\n\t\ttext = based_template.replace(/#/g, \"\")\r\n\t}\r\n\t\r\n\treturn {\r\n\t\ttext,\r\n\t\tlen\r\n\t}\r\n}\r\n\r\nconst _setLength = (phrases, hash, b_template) => {\r\n\treturn _phraseExecute(phrases, hash, (phrase) => {\r\n\t\tlet {len} = pastePhraseInTemplate(phrase.keyword, b_template)\r\n\t\treturn {\r\n\t\t\t...phrase,\r\n\t\t\tlength: len\r\n\t\t}\r\n\t})\r\n}\r\n\r\nconst _setLight = (phrases, hash) => {\r\n\treturn _phraseExecute(phrases, hash, (phrase) => {\r\n\t\tlet bolderLength = phrase\r\n\t\t\t.words\r\n\t\t\t.reduce((acc, curr) => {\r\n\t\t\t\treturn curr.marker\r\n\t\t\t\t\t? (curr.word.length + acc + 1)\r\n\t\t\t\t\t: acc\r\n\t\t\t}, -1)\r\n\r\n\t\tlet realLength = phrase\r\n\t\t\t.words\r\n\t\t\t.reduce((acc, curr) => {\r\n\t\t\t\treturn curr.word.length + acc + 1\r\n\t\t\t}, -1)\r\n\r\n\t\treturn {\r\n\t\t\t...phrase,\r\n\t\t\tlight: bolderLength / realLength * 100 | 0\r\n\t\t}\r\n\t})\r\n}\r\n\r\nconst isEqualWords = (word1, word2) => {\r\n\treturn cutEnd(word1) === cutEnd(word2)\r\n}\r\n\r\nconst cutEnd = (word) => {\r\n\tfor (let i = 0, len = ends.length; i < len; i++) {\r\n\t\tlet end = ends[i];\r\n\t\tlet withoutEnd = word.substring(0, word.length - end.length)\r\n\t\tlet wordsEnd = word.substring(word.length - end.length)\r\n\t\tif(end === wordsEnd){\r\n\t\t\treturn withoutEnd\r\n\t\t}\r\n\t}\r\n\treturn word\r\n}\r\n\r\nconst ends = [\r\n\t\"ему\", \"ыми\", \"ими\", \"ому\", \"ого\", \"ому\", \"ему\",\r\n\t\"им\", \"ым\", \"ей\", \"ой\", \"ою\", \"юю\", \"ые\", \"ых\", \"их\",\r\n\t\"ые\", \"ие\", \"ом\", \"ем\", \"ая\", \"ое\",\r\n\t\"о\", \"а\", \"я\", \"е\"\r\n]\r\n\r\n","import React from 'react';\r\nimport './Template.css';\r\n\r\nconst Template = ({template, onChange, generateTable, import_area}) => {\r\n\tlet onButtonClick = (e) => {\r\n\t\te.preventDefault()\r\n\t\tgenerateTable(import_area, template)\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"templater__template\">\r\n\t\t\t<input className=\"templater__template_input\"\r\n\t\t\t\t   value={template}\r\n\t\t\t\t   onChange={e => onChange(e.target.value)}\r\n\t\t\t\t   />\r\n\t    \t<span className=\"templater__template_length\">\r\n\t    \t\t{template\r\n\t    \t\t\t.replace(/#/g, \"\")\r\n\t    \t\t\t.replace(/(!|\\?|\\.)$/, \"\")\r\n\t\t\t\t\t.trim()\r\n\t    \t\t\t.length\r\n\t    \t\t}\r\n\t    \t</span>\r\n\t    \t<input type=\"submit\" \r\n\t    \t\t   value=\"MIX\"\r\n\t    \t\t   onClick={onButtonClick}\r\n\t    \t       className=\"templater__template_mix\"/>\r\n\t\t</div>\r\n\t);\r\n  \r\n}\r\n\r\nexport default Template;","import React from 'react';\r\nimport './Word.css';\r\n\r\nconst Word = ({word, marker, remarkWord, hash, template}) => {\r\n    // let _span;\r\n\r\n    const createText = () => {\r\n    \treturn marker \r\n    \t\t? (<b>{word} </b>) \r\n    \t\t: (<span>{word} </span>)\r\n    }\r\n\r\n    const onContextMenu = (e) => {\r\n        e.preventDefault();\r\n        remarkWord(hash, word, template);\r\n    }\r\n\r\n    return (\r\n\t\t<span className=\"templater__word\"\r\n              onContextMenu={onContextMenu}>\r\n\t\t\t{createText()}\r\n\t\t</span>\r\n    );\r\n}\r\n\r\n// Word.defaultProps = {\r\n//     \tword: \"default word\",\r\n//     \tmarker: true\r\n//     }\r\n\r\nexport default Word;","import React from 'react';\r\n\r\nimport Word from \"./Word/Word.js\";\r\n\r\nimport './Phrase.css';\r\n\r\nconst Phrase = ({phrase, hash, remarkWord}) => {\r\n    \r\n    const createWords = (phrase) => {\r\n        return phrase.words.map((word, index) => (\r\n            <Word key={index}\r\n                  hash={hash}\r\n                  template={phrase.based_template}\r\n                  remarkWord={remarkWord}\r\n                  {...word}/>\r\n        ))\r\n    }\r\n\r\n    return (\r\n  \t\t<div className=\"templater__phrase\">\r\n        {createWords(phrase)}\r\n  \t\t</div>\r\n    );\r\n}\r\n\r\nexport default Phrase;","import React from 'react';\n\nimport Phrase from \"./Phrase/Phrase.js\";\n\nconst Rows = ({phrases, onKeywordChange, remarkWord, onCheck}) => {\n  let row_array = [];\n\n  const createRow = (phrase, idx) => {\n    return (\n      <tr key={idx} className={phrase.colored ? \"colored\" : \"default\"}>\n        <td className=\"templater__table_keyword\">\n          <input\n            className=\"templater__table_input\"\n            onChange={e => onKeywordChange(idx, e.target.value, phrase.based_template)} \n            value={phrase.keyword} />\n        </td>\n        <td>\n          <input type=\"checkbox\"\n                 onClick={e => onCheck(idx)} \n                 checked={phrase.colored}/>\n          <Phrase phrase={phrase}\n                  hash={idx}\n                  remarkWord={remarkWord}/>\n        </td>\n        <td className=\"templater__table_length\">\n          {phrase.length}\n        </td>\n        <td className=\"templater__table_ligth\">\n          {phrase.light}\n        </td>\n      </tr>\n      )\n  }\n\n  const createRows = () => {\n    for (let phrase in phrases) {\n      row_array.push(createRow(phrases[phrase], phrase))\n    }\n\n    return row_array.map(curr => curr)\n  }\n\n  return (\n    <tbody>\n      {createRows()}\n    </tbody>\n  )\n}\n\nRows.defaultProps = {\n  phrases: []\n}\n\nexport default Rows;","import React from 'react';\r\n\r\nimport Rows from \"./Rows/Rows.js\";\r\n\r\nimport \"./Table.css\";\r\n\r\nconst Table = (props) => {\r\n    return (\r\n      <table className=\"templater__table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Keyword</th>\r\n            <th>Title</th>\r\n            <th>length</th>\r\n            <th>light</th>\r\n          </tr>\r\n        </thead>\r\n        <Rows {...props}/>\r\n      </table>\r\n    );\r\n\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\n\r\nimport \"./Keywords.css\";\r\n\r\nconst Keywords = ({import_area, onInputChange}) => {\r\n\r\n\tconst creator = () => {\r\n\t\treturn (\r\n\t\t\t<textarea name=\"keywords\" \r\n\t\t\t\t\t  id=\"\" \r\n\t\t\t\t\t  cols=\"30\" \r\n\t\t\t\t\t  rows=\"10\"\r\n\t\t\t\t\t  onChange={e => onInputChange(e.target.value)}\r\n\t\t\t\t\t  value={import_area}/>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"templater__keywords\">\r\n\t\t\t{creator()}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Keywords;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport {connect} from 'react-redux'\r\n\r\nimport Template from \"./Template/Template.js\";\r\nimport Table from \"./Table/Table.js\";\r\nimport Keywords from \"./Keywords/Keywords.js\";\r\n\r\nimport * as AC from \"./model/actions/phraseActions.js\"\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    let {data, //state object\r\n         remarkWord, //bolding words\r\n         fillImport, //fill import_area\r\n         onKeywordChange, //edit keywords in phrases\r\n         generateTable, //click the Mix button\r\n         colorPhrase, //click checkbox in rows\r\n         onTemplateChange} = this.props\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <img src={logo} \r\n             className=\"App-logo\" \r\n             alt=\"logo\" />\r\n        <Keywords onInputChange={fillImport}\r\n                  import_area={data.import_area}/>\r\n        <Template template={data.template}\r\n                  import_area={data.import_area}\r\n                  generateTable={generateTable}\r\n                  onChange={onTemplateChange} />\r\n        <Table\r\n          remarkWord={remarkWord}\r\n          onKeywordChange={onKeywordChange}\r\n          onCheck={colorPhrase}\r\n          phrases={data.phrases}/>\r\n        <textarea\r\n          rows=\"20\"\r\n          onChange={e=>e}\r\n          value={data.export_area}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  data: state\r\n})\r\n\r\nconst mergeProps = (stateProps, dispatchProps) => {\r\n  let {data} = stateProps\r\n  let {dispatch} = dispatchProps\r\n\r\n  return {\r\n    data,\r\n    onTemplateChange: (value) => {\r\n      dispatch(AC.editTemplate(value))\r\n    },\r\n    remarkWord: (hash, word, based_template) => {\r\n      dispatch(AC.remarkWord(hash, word, based_template))\r\n    },\r\n    onKeywordChange: (hash, value, b_template) => {\r\n      dispatch(AC.keywordChange(hash, value, b_template))\r\n    },\r\n    fillImport: (value) => {\r\n      dispatch(AC.fillImport(value))\r\n    },\r\n    generateTable: (input_area, template) => {\r\n      dispatch(AC.generateTable(input_area, template))\r\n    },\r\n    colorPhrase: (hash) => {\r\n      dispatch(AC.colorPhrase(data.phrases, hash))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps, \r\n  null,\r\n  mergeProps)(App);\r\n\r\n","import * as types from \"../constants/ActionTypes.js\"\r\n\r\nexport function remarkWord(hash, word, based_template) {\r\n\treturn {\r\n\t\ttype: types.REMARK_WORD,\r\n\t\thash,\r\n\t\tword,\r\n\t\tbased_template\r\n\t}\r\n}\r\n\r\nexport function fillImport(value) {\r\n\treturn{\r\n\t\ttype: types.FILL_IMPORT,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nexport function editTemplate(value) {\r\n\treturn {\r\n\t\ttype: types.EDIT_TEMPLATE,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nexport function keywordChange(hash, value, based_template) {\r\n\treturn {\r\n\t\ttype: types.KEYWORD_CHANGE,\r\n\t\thash,\r\n\t\tvalue,\r\n\t\tbased_template\r\n\t}\r\n}\r\n\r\nexport function generateTable(input_area, based_template){\r\n\treturn {\r\n\t\ttype: types.GENERATE_TABLE,\r\n\t\tinput_area,\r\n\t\tbased_template\r\n\t}\r\n}\r\n\r\nexport function colorPhrase(phrases, hash){\r\n\treturn {\r\n\t\ttype: types.COLOR_PHRASE,\r\n\t\thash,\r\n\t\tphrases\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport {createStore, combineReducers} from 'redux'\n\nimport * as reducers from \"./model/reducer.js\"\nimport {data} from \"./model/data/initialState.js\"\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nconst reducer = combineReducers(reducers, data)\nconst store = createStore(reducer)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n// serviceWorker.unregister();\n"],"sourceRoot":""}